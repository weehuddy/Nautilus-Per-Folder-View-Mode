Binary files nautilus-orig/data/gschemas.compiled and nautilus-test/data/gschemas.compiled differ
diff -ruN nautilus-orig/data/org.gnome.nautilus.gschema.xml nautilus-test/data/org.gnome.nautilus.gschema.xml
--- nautilus-orig/data/org.gnome.nautilus.gschema.xml	2025-08-18 14:33:09.259953193 +0100
+++ nautilus-test/data/org.gnome.nautilus.gschema.xml	2025-08-17 20:12:05.751550671 +0100
@@ -77,6 +77,15 @@
   </schema>
 
   <schema path="/org/gnome/nautilus/preferences/" id="org.gnome.nautilus.preferences" gettext-domain="nautilus">
+        <!-- Per-folder view mode preferences -->
+    <key name="per-folder-view-modes" type="a{ss}">
+      <default>{}</default>
+      <summary>Per-folder view mode preferences</summary>
+      <description>
+        A mapping of folder URIs to preferred view mode ("list", "grid", or "icon").
+        Stored per-user via GSettings (not written to disk).
+      </description>
+    </key>
     <key type="b" name="always-use-location-entry">
       <default>false</default>
       <summary>Always use the location entry, instead of the pathbar</summary>
diff -ruN nautilus-orig/src/nautilus-list-view.c nautilus-test/src/nautilus-list-view.c
--- nautilus-orig/src/nautilus-list-view.c	2025-08-18 14:33:09.415953191 +0100
+++ nautilus-test/src/nautilus-list-view.c	2025-08-17 18:31:22.736472361 +0100
@@ -1264,3 +1264,4 @@
 {
     return g_object_new (NAUTILUS_TYPE_LIST_VIEW, NULL);
 }
+
diff -ruN nautilus-orig/src/nautilus-per-folder-view.h nautilus-test/src/nautilus-per-folder-view.h
--- nautilus-orig/src/nautilus-per-folder-view.h	1970-01-01 01:00:00.000000000 +0100
+++ nautilus-test/src/nautilus-per-folder-view.h	2025-08-18 13:43:37.538930204 +0100
@@ -0,0 +1,66 @@
+#pragma once
+#include <gio/gio.h>
+
+/* Key name in org.gnome.nautilus.preferences */
+#define PFV_SCHEMA "org.gnome.nautilus.preferences"
+#define PFV_KEY    "per-folder-view-modes"
+
+/* Returns newly-allocated string ("list","grid","icon") or NULL */
+static inline char *
+pfv_get_mode_for_uri (const char *uri)
+{
+    if (!uri) return NULL;
+
+    GSettings *s = g_settings_new (PFV_SCHEMA);
+    GVariant *dict = g_settings_get_value (s, PFV_KEY);
+    GVariantIter it;
+    const char *k, *v;
+    char *result = NULL;
+
+    g_variant_iter_init (&it, dict);
+    while (g_variant_iter_next (&it, "{ss}", &k, &v)) {
+        if (g_strcmp0 (k, uri) == 0) {
+            result = g_strdup (v);
+            break;
+        }
+    }
+
+    g_variant_unref (dict);
+    g_object_unref (s);
+    //g_message ("pfv_get_mode_for_uri Restore mode for URI: %s", result);
+    return result;
+
+}
+
+/* Set/update mapping: uri -> mode ("list","grid","icon") */
+static inline void
+pfv_set_mode_for_uri (const char *uri, const char *mode)
+{
+    if (!uri || !mode) return;
+
+    GSettings *s = g_settings_new (PFV_SCHEMA);
+    GVariant *dict = g_settings_get_value (s, PFV_KEY);
+    GVariantBuilder b;
+    GVariantIter it;
+    const char *k, *v;
+
+    g_variant_builder_init (&b, G_VARIANT_TYPE ("a{ss}"));
+    g_variant_iter_init (&it, dict);
+
+    /* Keep everything else */
+    while (g_variant_iter_next (&it, "{ss}", &k, &v)) {
+        if (g_strcmp0 (k, uri) != 0) {
+            g_variant_builder_add (&b, "{ss}", k, v);
+        }
+    }
+    /* New/updated entry */
+    g_variant_builder_add (&b, "{ss}", uri, mode);
+
+    GVariant *newdict = g_variant_builder_end (&b);
+    g_settings_set_value (s, PFV_KEY, newdict);
+
+    g_variant_unref (dict);
+    g_object_unref (s);
+
+}
+
diff -ruN nautilus-orig/src/nautilus-window.c nautilus-test/src/nautilus-window.c
--- nautilus-orig/src/nautilus-window.c	2025-08-18 14:33:09.427953191 +0100
+++ nautilus-test/src/nautilus-window.c	2025-08-18 14:24:31.843962418 +0100
@@ -61,6 +61,7 @@
 #include "nautilus-trash-monitor.h"
 #include "nautilus-ui-utilities.h"
 #include "nautilus-window-slot.h"
+#include "nautilus-per-folder-view.h"
 
 static void nautilus_window_initialize_actions (NautilusWindow *window);
 static void nautilus_window_back_or_forward (NautilusWindow *window,
@@ -287,9 +288,29 @@
                           GParamSpec         *pspec,
                           NautilusWindow     *window)
 {
-    if (nautilus_window_get_active_slot (window) == slot)
-    {
+    if (nautilus_window_get_active_slot (window) == slot) {
+        /* Let Nautilus update the UI first */
         on_location_changed (window);
+
+        /* Restore per-folder view mode */
+        GFile *location = nautilus_window_slot_get_location (slot);
+        if (location != NULL) {
+            char *uri = g_file_get_uri (location);
+            char *mode = pfv_get_mode_for_uri (uri);
+
+            if (mode) {
+                if (g_strcmp0 (mode, "list") == 0) {
+                    change_files_view_mode (slot, NAUTILUS_VIEW_LIST_ID);
+                } else if (g_strcmp0 (mode, "grid") == 0) {
+                    change_files_view_mode (slot, NAUTILUS_VIEW_GRID_ID);
+                } else {
+                    g_warning ("Unknown view mode '%s' for URI %s", mode, uri);
+                }
+                g_free (mode);
+            }
+
+            g_free (uri);
+        }
     }
 }
 
@@ -432,6 +453,7 @@
     g_signal_connect (slot, "notify::title", G_CALLBACK (on_update_page_tooltip), page);
 }
 
+
 void
 nautilus_window_open_location_full (NautilusWindow     *window,
                                     GFile              *location,
@@ -469,6 +491,21 @@
     }
 
     nautilus_window_slot_open_location_full (target_slot, location, flags, selection);
+
+    /* Restore per-folder view mode */
+    if (location != NULL) {
+        char *uri = g_file_get_uri (location);
+        char *mode = pfv_get_mode_for_uri (uri);
+        if (mode) {
+            /* Here, trigger the same logic Nautilus normally uses to change view */
+            GAction *a = g_action_map_lookup_action (G_ACTION_MAP (window), "view-mode");
+            if (a) {
+                g_action_activate (a, g_variant_new_string (mode));
+            }
+            g_free (mode);
+        }
+        g_free (uri);
+    }
 }
 
 static gboolean
@@ -511,6 +548,27 @@
     current_slot = NAUTILUS_WINDOW_SLOT (adw_tab_page_get_child (page));
     location = nautilus_window_slot_get_location (current_slot);
 
+    char *uri = g_file_get_uri (location);
+    char *mode = pfv_get_mode_for_uri (uri);
+
+    if (mode) {
+        /* Prefer using existing window actions to switch views.
+         * Action names can vary. Common patterns:
+         *   "win.use-list-view", "win.use-grid-view", "win.use-icon-view"
+         * Discover with: grep -R "use-.*-view" src/
+         */
+        if (g_strcmp0 (mode, "list") == 0) {
+            gtk_widget_activate_action (GTK_WIDGET (window), "win.use-list-view", NULL);
+        } else if (g_strcmp0 (mode, "grid") == 0) {
+            gtk_widget_activate_action (GTK_WIDGET (window), "win.use-grid-view", NULL);
+        } else if (g_strcmp0 (mode, "icon") == 0) {
+            gtk_widget_activate_action (GTK_WIDGET (window), "win.use-icon-view", NULL);
+        }
+    }
+
+    g_free (mode);
+    g_free (uri);
+
     if (location != NULL)
     {
         if (g_file_has_uri_scheme (location, SCHEME_SEARCH))
diff -ruN nautilus-orig/src/nautilus-window-slot.c nautilus-test/src/nautilus-window-slot.c
--- nautilus-orig/src/nautilus-window-slot.c	2025-08-18 14:33:09.427953191 +0100
+++ nautilus-test/src/nautilus-window-slot.c	2025-08-18 14:17:33.155976797 +0100
@@ -48,7 +48,7 @@
 #include "nautilus-module.h"
 #include "nautilus-monitor.h"
 #include "nautilus-ui-utilities.h"
-
+#include "nautilus-per-folder-view.h"
 enum
 {
     PROP_ACTIVE = 1,
@@ -1124,7 +1124,7 @@
     }
 }
 
-static void
+void
 change_files_view_mode (NautilusWindowSlot *self,
                         guint               view_id)
 {
@@ -1134,6 +1134,14 @@
     self->view_id = view_id;
     nautilus_window_slot_set_view_id (self, view_id);
     g_settings_set_enum (nautilus_preferences, NAUTILUS_PREFERENCES_DEFAULT_FOLDER_VIEWER, view_id);
+    GFile *loc = nautilus_window_slot_get_location (self);
+    if (loc) {
+        char *uri = g_file_get_uri (loc);
+        const char *mode = (view_id == NAUTILUS_VIEW_LIST_ID) ? "list" : "grid";
+        pfv_set_mode_for_uri (uri, mode);
+        g_free (uri);
+    }
+
 }
 
 static void
diff -ruN nautilus-orig/src/nautilus-window-slot.h nautilus-test/src/nautilus-window-slot.h
--- nautilus-orig/src/nautilus-window-slot.h	2025-08-18 14:33:09.427953191 +0100
+++ nautilus-test/src/nautilus-window-slot.h	2025-08-18 14:17:12.031977076 +0100
@@ -122,3 +122,5 @@
                                                             guint               distance);
 
 void free_navigation_state                                 (gpointer data);
+void change_files_view_mode (NautilusWindowSlot *self,
+                        guint               view_id);
