diff -ruN nautilus-orig/data/org.gnome.nautilus.gschema.xml nautilus/data/org.gnome.nautilus.gschema.xml
--- nautilus-orig/data/org.gnome.nautilus.gschema.xml	2025-08-20 21:53:30.542939855 +0100
+++ nautilus/data/org.gnome.nautilus.gschema.xml	2025-08-20 21:52:00.255183965 +0100
@@ -77,6 +77,28 @@
   </schema>
 
   <schema path="/org/gnome/nautilus/preferences/" id="org.gnome.nautilus.preferences" gettext-domain="nautilus">
+        <!-- Per-folder view mode preferences -->
+    <key name="per-folder-view-modes" type="a{ss}">
+      <default>{}</default>
+      <summary>Per-folder view mode preferences</summary>
+      <description>
+        A mapping of folder URIs to preferred view mode ("list", "grid", or "icon").
+        Stored per-user via GSettings (not written to disk).
+      </description>
+    </key>
+   <!-- Per-folder icon zoom levels -->
+    <key name="per-folder-zoom" type="a{ss}">
+      <default>@a{ss} {}</default>
+      <summary>Per-Folder-Zoom levels</summary>
+      <description>
+        Stores zoom level per folder URI.
+        The key is the folder URI (e.g. "file:///home/user/Documents"),
+        and the value is a string representing the zoom level:
+        "0" = small, "1" = standard, "2" = large.
+
+        This allows Nautilus to remember custom zoom settings for individual folders.
+      </description>
+    </key>
     <key type="b" name="always-use-location-entry">
       <default>false</default>
       <summary>Always use the location entry, instead of the pathbar</summary>
diff -ruN nautilus-orig/src/nautilus-files-view.c nautilus/src/nautilus-files-view.c
--- nautilus-orig/src/nautilus-files-view.c	2025-08-20 21:53:30.710943242 +0100
+++ nautilus/src/nautilus-files-view.c	2025-08-23 09:16:03.569147963 +0100
@@ -85,6 +85,7 @@
 #include "nautilus-view.h"
 #include "nautilus-view-model.h"
 #include "nautilus-tracker-utilities.h"
+#include "nautilus-per-folder-view.h"
 
 /* Minimum starting update inverval */
 #define UPDATE_INTERVAL_MIN 100
@@ -2732,6 +2733,14 @@
                                          "zoom-standard");
     g_simple_action_set_enabled (G_SIMPLE_ACTION (action),
                                  zoom_level != view_info.zoom_level_standard);
+    /* Persist per-folder icon size (zoom) */
+    GFile *loc = nautilus_view_get_location (NAUTILUS_VIEW (self));
+    if (loc) {
+        char *uri = g_file_get_uri (loc);
+        gint new_zoom = nautilus_list_base_get_zoom_level (priv->list_base);
+        pfv_set_icon_size_for_uri_int (uri, new_zoom);
+        g_free (uri);
+    }
 }
 
 static void
@@ -2773,6 +2782,16 @@
     update_zoom_actions_state (self);
 }
 
+void
+nautilus_files_view_set_zoom_level (NautilusFilesView *self, gint zoom_level)
+{
+    NautilusFilesViewPrivate *priv = nautilus_files_view_get_instance_private (self);
+
+    /* Apply zoom */
+    nautilus_list_base_set_zoom_level (priv->list_base, zoom_level);
+    update_zoom_actions_state (self);
+}
+
 static void
 action_open_item_new_window (GSimpleAction *action,
                              GVariant      *state,
diff -ruN nautilus-orig/src/nautilus-files-view.h nautilus/src/nautilus-files-view.h
--- nautilus-orig/src/nautilus-files-view.h	2025-08-20 21:53:30.710943242 +0100
+++ nautilus/src/nautilus-files-view.h	2025-08-20 21:52:00.255183965 +0100
@@ -160,5 +160,6 @@
 void              nautilus_files_view_update_context_menus       (NautilusFilesView      *view);
 void              nautilus_files_view_update_toolbar_menus       (NautilusFilesView      *view);
 void              nautilus_files_view_update_actions_state       (NautilusFilesView      *view);
-
+void              nautilus_files_view_set_zoom_level             (NautilusFilesView *self,
+                                                                   gint zoom_level);
 G_END_DECLS
diff -ruN nautilus-orig/src/nautilus-per-folder-view.h nautilus/src/nautilus-per-folder-view.h
--- nautilus-orig/src/nautilus-per-folder-view.h	1970-01-01 01:00:00.000000000 +0100
+++ nautilus/src/nautilus-per-folder-view.h	2025-08-22 20:10:28.277618079 +0100
@@ -0,0 +1,142 @@
+#pragma once
+#include <gio/gio.h>
+
+#define PFV_SCHEMA "org.gnome.nautilus.preferences"
+#define PFV_KEY    "per-folder-view-modes"
+#define PFV_ZOOM_KEY "per-folder-zoom"
+
+
+
+static inline char *
+pfv_get_icon_size_for_uri (const char *uri)
+{
+    if (!uri) return NULL;
+
+    GSettings *s = g_settings_new (PFV_SCHEMA);
+    GVariant *dict = g_settings_get_value (s, PFV_ZOOM_KEY);
+    GVariantIter it;
+    const char *k, *v;
+    char *result = NULL;
+
+    g_variant_iter_init (&it, dict);
+    while (g_variant_iter_next (&it, "{ss}", &k, &v)) {
+        if (g_strcmp0 (k, uri) == 0) {
+            result = g_strdup (v);
+            break;
+        }
+    }
+
+    g_variant_unref (dict);
+    g_object_unref (s);
+    return result;
+
+}
+/* Set/update mapping: uri -> icon size ("0","1","2") */
+static inline void
+pfv_set_icon_size_for_uri (const char *uri, const char *mode)
+{
+if (!uri || !mode) return;
+
+    GSettings *s = g_settings_new (PFV_SCHEMA);
+    GVariant *dict = g_settings_get_value (s, PFV_ZOOM_KEY);
+    GVariantBuilder b;
+    GVariantIter it;
+    const char *k, *v;
+
+    g_variant_builder_init (&b, G_VARIANT_TYPE ("a{ss}"));
+    g_variant_iter_init (&it, dict);
+
+    /* Keep everything else */
+    while (g_variant_iter_next (&it, "{ss}", &k, &v)) {
+        if (g_strcmp0 (k, uri) != 0) {
+            g_variant_builder_add (&b, "{ss}", k, v);
+        }
+    }
+    /* New/updated entry */
+    g_variant_builder_add (&b, "{ss}", uri, mode);
+
+    GVariant *newdict = g_variant_builder_end (&b);
+    g_settings_set_value (s, PFV_ZOOM_KEY, newdict);
+    g_variant_unref (dict);
+    g_object_unref (s);
+
+}
+/* Set/update mapping: uri -> mode ("list","grid") */
+static inline void
+pfv_set_mode_for_uri (const char *uri, const char *mode)
+{
+    if (!uri || !mode) return;
+
+    GSettings *s = g_settings_new (PFV_SCHEMA);
+    GVariant *dict = g_settings_get_value (s, PFV_KEY);
+    GVariantBuilder b;
+    GVariantIter it;
+    const char *k, *v;
+
+    g_variant_builder_init (&b, G_VARIANT_TYPE ("a{ss}"));
+    g_variant_iter_init (&it, dict);
+
+    /* Keep everything else */
+    while (g_variant_iter_next (&it, "{ss}", &k, &v)) {
+        if (g_strcmp0 (k, uri) != 0) {
+            g_variant_builder_add (&b, "{ss}", k, v);
+        }
+    }
+    /* New/updated entry */
+    g_variant_builder_add (&b, "{ss}", uri, mode);
+
+    GVariant *newdict = g_variant_builder_end (&b);
+    g_settings_set_value (s, PFV_KEY, newdict);
+
+    g_variant_unref (dict);
+    g_object_unref (s);
+   // g_variant_unref (dict);
+
+}
+
+static inline char *
+pfv_get_mode_for_uri (const char *uri)
+{
+    if (!uri) return NULL;
+
+    GSettings *s = g_settings_new (PFV_SCHEMA);
+    GVariant *dict = g_settings_get_value (s, PFV_KEY);
+    GVariantIter it;
+    const char *k, *v;
+    char *result = NULL;
+
+    g_variant_iter_init (&it, dict);
+    while (g_variant_iter_next (&it, "{ss}", &k, &v)) {
+        if (g_strcmp0 (k, uri) == 0) {
+            result = g_strdup (v);
+            break;
+        }
+    }
+
+    g_variant_unref (dict);
+    g_object_unref (s);
+    return result;
+
+}
+
+static inline void
+pfv_set_icon_size_for_uri_int (const char *uri, int zoom_level)
+{
+    char *s = g_strdup_printf ("%d", zoom_level);
+    pfv_set_icon_size_for_uri (uri, s);   /* your existing string-based setter */
+    g_free (s);
+}
+
+static inline gint
+pfv_get_icon_size_for_uri_int (const char *uri)
+{
+    char *s = pfv_get_icon_size_for_uri (uri);  /* your existing string-based getter */
+    if (s == NULL) {
+        return -1;  /* or 0, depending on what you want as "no zoom saved" */
+    }
+
+    gint zoom = (gint) g_ascii_strtoll (s, NULL, 10);
+    g_free (s);
+    return zoom;
+}
+
diff -ruN nautilus-orig/src/nautilus-window.c nautilus/src/nautilus-window.c
--- nautilus-orig/src/nautilus-window.c	2025-08-20 21:53:30.718943404 +0100
+++ nautilus/src/nautilus-window.c	2025-08-23 09:17:50.033150342 +0100
@@ -61,6 +61,8 @@
 #include "nautilus-trash-monitor.h"
 #include "nautilus-ui-utilities.h"
 #include "nautilus-window-slot.h"
+#include "nautilus-per-folder-view.h"
+#include "nautilus-view.h"
 
 static void nautilus_window_initialize_actions (NautilusWindow *window);
 static void nautilus_window_back_or_forward (NautilusWindow *window,
@@ -287,9 +289,31 @@
                           GParamSpec         *pspec,
                           NautilusWindow     *window)
 {
-    if (nautilus_window_get_active_slot (window) == slot)
-    {
+
+    if (nautilus_window_get_active_slot (window) == slot) {
+        /* Let Nautilus update the UI first */
         on_location_changed (window);
+        /* Restore per-folder view mode */
+        GFile *location = nautilus_window_slot_get_location (slot);
+        if (location != NULL) {
+            char *uri = g_file_get_uri (location);
+            char *mode = pfv_get_mode_for_uri (uri);
+            gint zoom = pfv_get_icon_size_for_uri_int (uri);
+            NautilusView *view = nautilus_window_slot_get_current_view (slot);
+            if (mode) {
+                if (g_strcmp0 (mode, "list") == 0) {
+                    change_files_view_mode (slot, NAUTILUS_VIEW_LIST_ID);
+
+                } else if (g_strcmp0 (mode, "grid") == 0) {
+                    change_files_view_mode (slot, NAUTILUS_VIEW_GRID_ID);
+
+                } else {
+                    g_warning ("Unknown view mode '%s' for URI %s", mode, uri);
+                }
+                nautilus_files_view_set_zoom_level (NAUTILUS_FILES_VIEW (view), zoom);
+                g_free (mode);
+            }
+        }
     }
 }
 
@@ -511,6 +535,23 @@
     current_slot = NAUTILUS_WINDOW_SLOT (adw_tab_page_get_child (page));
     location = nautilus_window_slot_get_location (current_slot);
 
+    char *uri = g_file_get_uri (location);
+    char *mode = pfv_get_mode_for_uri (uri);
+
+    if (mode) {
+
+        if (g_strcmp0 (mode, "list") == 0) {
+            gtk_widget_activate_action (GTK_WIDGET (window), "win.use-list-view", NULL);
+        } else if (g_strcmp0 (mode, "grid") == 0) {
+            gtk_widget_activate_action (GTK_WIDGET (window), "win.use-grid-view", NULL);
+        } else if (g_strcmp0 (mode, "icon") == 0) {
+            gtk_widget_activate_action (GTK_WIDGET (window), "win.use-icon-view", NULL);
+        }
+    }
+
+    g_free (mode);
+    g_free (uri);
+
     if (location != NULL)
     {
         if (g_file_has_uri_scheme (location, SCHEME_SEARCH))
diff -ruN nautilus-orig/src/nautilus-window-slot.c nautilus/src/nautilus-window-slot.c
--- nautilus-orig/src/nautilus-window-slot.c	2025-08-20 21:53:30.718943404 +0100
+++ nautilus/src/nautilus-window-slot.c	2025-08-20 21:52:00.255183965 +0100
@@ -48,6 +48,7 @@
 #include "nautilus-module.h"
 #include "nautilus-monitor.h"
 #include "nautilus-ui-utilities.h"
+#include "nautilus-per-folder-view.h"
 
 enum
 {
@@ -1124,7 +1125,7 @@
     }
 }
 
-static void
+void
 change_files_view_mode (NautilusWindowSlot *self,
                         guint               view_id)
 {
@@ -1134,6 +1135,13 @@
     self->view_id = view_id;
     nautilus_window_slot_set_view_id (self, view_id);
     g_settings_set_enum (nautilus_preferences, NAUTILUS_PREFERENCES_DEFAULT_FOLDER_VIEWER, view_id);
+    GFile *loc = nautilus_window_slot_get_location (self);
+    if (loc) {
+        char *uri = g_file_get_uri (loc);
+        const char *mode = (view_id == NAUTILUS_VIEW_LIST_ID) ? "list" : "grid";
+        pfv_set_mode_for_uri (uri, mode);
+        g_free (uri);
+    }
 }
 
 static void
diff -ruN nautilus-orig/src/nautilus-window-slot.h nautilus/src/nautilus-window-slot.h
--- nautilus-orig/src/nautilus-window-slot.h	2025-08-20 21:53:30.718943404 +0100
+++ nautilus/src/nautilus-window-slot.h	2025-08-20 21:52:00.255183965 +0100
@@ -122,3 +122,6 @@
                                                             guint               distance);
 
 void free_navigation_state                                 (gpointer data);
+
+void change_files_view_mode (NautilusWindowSlot *self,
+                        guint               view_id);
